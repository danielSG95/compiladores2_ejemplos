
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftPLUSMINUSleftTIMESDIVIDEMODULErightUMENOSAND ASIG BOOLEAN COLON COMA CONSOLE CONST DIFF DIVIDE DOT ELSE FALSE FUNCTION ID IF IGUAL INTERFACE LLAVE_A LLAVE_C LOG LPAREN MAYOR MAYORI MENOR MENORI MINUS MODULE NOT NUMBER OR PLUS RETURN RPAREN SEMICOLON STRING TIMES TNUMBER TRUE TSTRING VAR WHILE init : instrucciones  instrucciones : instrucciones instruccion\n    \t\t\t\t| instruccion instruccion : instruccion_inline\n                    | instruccion_bloque\n                    | interface_definition  interface_definition : INTERFACE ID LLAVE_A interface_props SEMICOLON LLAVE_C interface_props : interface_props SEMICOLON ID COLON tipo_dato\n                        | ID COLON tipo_dato instruccion_inline : print\n                          | declare\n                          | asignacion\n                          | llamada SEMICOLON\n                          | retorno  retorno : RETURN expresion_logica SEMICOLON\n                | RETURN SEMICOLON print : CONSOLE DOT LOG LPAREN expresion_logica RPAREN SEMICOLON declare : tipo_declaracion ID COLON tipo_dato ASIG expresion_logica SEMICOLON asignacion : ID ASIG expresion_logica SEMICOLON tipo_declaracion : CONST\n    \t\t\t\t\t| VAR instruccion_bloque : instruccion_if\n                            | instruccion_while\n                            | declaracion_funcion instruccion_if : IF LPAREN expresion_logica RPAREN ifAux\n                        | IF LPAREN expresion_logica RPAREN ifAux ELSE instruccion_if\n                        | IF LPAREN expresion_logica RPAREN ifAux ELSE ifAux ifAux : LLAVE_A instrucciones LLAVE_C instruccion_while : WHILE LPAREN expresion_logica RPAREN LLAVE_A instrucciones LLAVE_C  declaracion_funcion : FUNCTION ID LPAREN params RPAREN fretorno LLAVE_A instrucciones LLAVE_C  params : lparams\n                | empty  lparams : lparams COMA param\n                | param  param : expresion_logica COLON tipo_dato  fretorno : COLON tipo_dato\n                | empty  expresion_logica : expresion_relacional AND expresion_relacional\n                        | expresion_relacional OR expresion_relacional\n                        | NOT expresion_relacional\n                        | expresion_relacional expresion_relacional : expresion_numerica MAYOR expresion_numerica\n                            | expresion_numerica MENOR expresion_numerica\n                            | expresion_numerica MAYORI expresion_numerica\n                            | expresion_numerica MENORI expresion_numerica\n                            | expresion_numerica IGUAL expresion_numerica\n                            | expresion_numerica DIFF expresion_numerica\n                            | expresion_numerica expresion_numerica : MINUS expresion_numerica %prec UMENOS\n    \t\t\t| expresion_numerica PLUS expresion_numerica\n    \t\t\t| expresion_numerica MINUS expresion_numerica\n\t\t\t\t| expresion_numerica TIMES expresion_numerica\n\t\t\t\t| expresion_numerica DIVIDE expresion_numerica\n\t\t\t\t| expresion_numerica MODULE expresion_numerica\n       \t\t    | terminal terminal : TNUMBER\n    \t\t\t| TSTRING\n    \t\t\t| TRUE\n    \t\t\t| FALSE\n       \t\t    | ID\n       \t\t    | llamada\n       \t\t    | LLAVE_A lvalues LLAVE_C\n       \t\t    | ID DOT ID lvalues : lvalues COMA ID COLON expresion_logica\n                | ID COLON expresion_logica llamada : ID LPAREN args RPAREN args : lexpresiones\n            | empty  lexpresiones : lexpresiones COMA expresion_logica\n                    | expresion_logica  tipo_dato : STRING\n                | NUMBER\n                | BOOLEAN\n                | ID\n                | emptyempty :'
    
_lr_action_items = {'INTERFACE':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,135,136,143,144,146,147,148,149,150,153,154,],[15,15,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,15,15,-7,15,15,-17,-18,-27,-26,-28,-29,15,15,-30,]),'CONSOLE':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,135,136,143,144,146,147,148,149,150,153,154,],[17,17,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,17,17,-7,17,17,-17,-18,-27,-26,-28,-29,17,17,-30,]),'ID':([0,2,3,4,5,6,7,8,9,11,12,13,14,15,18,19,22,23,24,25,26,28,29,33,35,37,45,46,47,49,56,57,58,59,61,62,63,64,65,66,67,68,69,70,71,73,78,81,83,84,106,107,115,116,119,122,123,124,126,127,130,133,135,136,138,142,143,144,146,147,148,149,150,153,154,],[16,16,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,27,31,43,48,-20,-21,-2,-13,43,43,-16,43,43,75,43,43,79,85,-15,43,43,43,43,43,43,43,43,43,43,43,43,43,104,43,-19,43,43,120,43,85,129,43,-25,16,16,43,85,-7,43,16,16,85,85,-17,-18,-27,-26,-28,-29,16,16,-30,]),'RETURN':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,135,136,143,144,146,147,148,149,150,153,154,],[19,19,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,19,19,-7,19,19,-17,-18,-27,-26,-28,-29,19,19,-30,]),'IF':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,134,135,136,143,144,146,147,148,149,150,153,154,],[20,20,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,20,20,-7,20,20,20,-17,-18,-27,-26,-28,-29,20,20,-30,]),'WHILE':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,135,136,143,144,146,147,148,149,150,153,154,],[21,21,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,21,21,-7,21,21,-17,-18,-27,-26,-28,-29,21,21,-30,]),'FUNCTION':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,135,136,143,144,146,147,148,149,150,153,154,],[22,22,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,22,22,-7,22,22,-17,-18,-27,-26,-28,-29,22,22,-30,]),'CONST':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,135,136,143,144,146,147,148,149,150,153,154,],[23,23,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,23,23,-7,23,23,-17,-18,-27,-26,-28,-29,23,23,-30,]),'VAR':([0,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,123,124,130,135,136,143,144,146,147,148,149,150,153,154,],[24,24,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,24,24,-7,24,24,-17,-18,-27,-26,-28,-29,24,24,-30,]),'$end':([1,2,3,4,5,6,7,8,9,11,12,13,14,25,26,33,57,81,122,130,143,144,146,147,148,149,154,],[0,-1,-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-15,-19,-25,-7,-17,-18,-27,-26,-28,-29,-30,]),'LLAVE_C':([3,4,5,6,7,8,9,11,12,13,14,25,26,33,34,36,38,39,40,41,42,43,44,57,60,72,74,81,82,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,116,121,122,130,135,136,143,144,145,146,147,148,149,153,154,],[-3,-4,-5,-6,-10,-11,-12,-14,-22,-23,-24,-2,-13,-16,-41,-48,-55,-56,-57,-58,-59,-60,-61,-15,-40,-49,105,-19,-66,-38,-39,-42,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-63,-62,130,-65,-25,-7,148,149,-17,-18,-64,-27,-26,-28,-29,154,-30,]),'SEMICOLON':([10,19,32,34,36,38,39,40,41,42,43,44,50,60,72,80,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,115,128,131,132,142,152,],[26,33,57,-41,-48,-55,-56,-57,-58,-59,-60,-61,81,-40,-49,116,-66,-74,-71,-72,-73,-75,-38,-39,-42,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-63,-62,-76,-9,143,144,-76,-8,]),'ASIG':([16,56,85,86,87,88,89,90,],[28,-76,-74,119,-71,-72,-73,-75,]),'LPAREN':([16,20,21,43,48,55,],[29,46,47,29,78,84,]),'DOT':([17,43,],[30,73,]),'NOT':([19,28,29,46,47,78,83,84,107,119,126,133,],[35,35,35,35,35,35,35,35,35,35,35,35,]),'MINUS':([19,28,29,35,36,37,38,39,40,41,42,43,44,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,72,78,82,83,84,93,94,95,96,97,98,99,100,101,102,103,104,105,107,119,126,133,],[37,37,37,37,68,37,-55,-56,-57,-58,-59,-60,-61,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,-49,37,-66,37,37,68,68,68,68,68,68,-50,-51,-52,-53,-54,-63,-62,37,37,37,37,]),'TNUMBER':([19,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,107,119,126,133,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'TSTRING':([19,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,107,119,126,133,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'TRUE':([19,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,107,119,126,133,],[41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,]),'FALSE':([19,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,107,119,126,133,],[42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'LLAVE_A':([19,27,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,85,87,88,89,90,107,108,109,119,125,126,133,134,137,138,139,151,],[45,49,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,45,-74,-71,-72,-73,-75,45,123,124,45,-76,45,45,123,150,-76,-37,-36,]),'RPAREN':([29,34,36,38,39,40,41,42,43,44,51,52,53,54,60,72,76,77,78,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,110,111,112,113,117,118,127,140,141,],[-76,-41,-48,-55,-56,-57,-58,-59,-60,-61,82,-67,-68,-70,-40,-49,108,109,-76,-66,-74,-71,-72,-73,-75,-38,-39,-42,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-63,-62,125,-31,-32,-34,-69,131,-76,-33,-35,]),'LOG':([30,],[55,]),'COLON':([31,34,36,38,39,40,41,42,43,44,60,72,75,79,82,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,114,120,125,129,],[56,-41,-48,-55,-56,-57,-58,-59,-60,-61,-40,-49,107,115,-66,-38,-39,-42,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-63,-62,127,133,138,142,]),'AND':([34,36,38,39,40,41,42,43,44,72,82,93,94,95,96,97,98,99,100,101,102,103,104,105,],[58,-48,-55,-56,-57,-58,-59,-60,-61,-49,-66,-42,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-63,-62,]),'OR':([34,36,38,39,40,41,42,43,44,72,82,93,94,95,96,97,98,99,100,101,102,103,104,105,],[59,-48,-55,-56,-57,-58,-59,-60,-61,-49,-66,-42,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-63,-62,]),'COMA':([34,36,38,39,40,41,42,43,44,52,54,60,72,74,82,85,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,111,113,117,121,127,140,141,145,],[-41,-48,-55,-56,-57,-58,-59,-60,-61,83,-70,-40,-49,106,-66,-74,-71,-72,-73,-75,-38,-39,-42,-43,-44,-45,-46,-47,-50,-51,-52,-53,-54,-63,-62,126,-34,-69,-65,-76,-33,-35,-64,]),'MAYOR':([36,38,39,40,41,42,43,44,72,82,99,100,101,102,103,104,105,],[61,-55,-56,-57,-58,-59,-60,-61,-49,-66,-50,-51,-52,-53,-54,-63,-62,]),'MENOR':([36,38,39,40,41,42,43,44,72,82,99,100,101,102,103,104,105,],[62,-55,-56,-57,-58,-59,-60,-61,-49,-66,-50,-51,-52,-53,-54,-63,-62,]),'MAYORI':([36,38,39,40,41,42,43,44,72,82,99,100,101,102,103,104,105,],[63,-55,-56,-57,-58,-59,-60,-61,-49,-66,-50,-51,-52,-53,-54,-63,-62,]),'MENORI':([36,38,39,40,41,42,43,44,72,82,99,100,101,102,103,104,105,],[64,-55,-56,-57,-58,-59,-60,-61,-49,-66,-50,-51,-52,-53,-54,-63,-62,]),'IGUAL':([36,38,39,40,41,42,43,44,72,82,99,100,101,102,103,104,105,],[65,-55,-56,-57,-58,-59,-60,-61,-49,-66,-50,-51,-52,-53,-54,-63,-62,]),'DIFF':([36,38,39,40,41,42,43,44,72,82,99,100,101,102,103,104,105,],[66,-55,-56,-57,-58,-59,-60,-61,-49,-66,-50,-51,-52,-53,-54,-63,-62,]),'PLUS':([36,38,39,40,41,42,43,44,72,82,93,94,95,96,97,98,99,100,101,102,103,104,105,],[67,-55,-56,-57,-58,-59,-60,-61,-49,-66,67,67,67,67,67,67,-50,-51,-52,-53,-54,-63,-62,]),'TIMES':([36,38,39,40,41,42,43,44,72,82,93,94,95,96,97,98,99,100,101,102,103,104,105,],[69,-55,-56,-57,-58,-59,-60,-61,-49,-66,69,69,69,69,69,69,69,69,-52,-53,-54,-63,-62,]),'DIVIDE':([36,38,39,40,41,42,43,44,72,82,93,94,95,96,97,98,99,100,101,102,103,104,105,],[70,-55,-56,-57,-58,-59,-60,-61,-49,-66,70,70,70,70,70,70,70,70,-52,-53,-54,-63,-62,]),'MODULE':([36,38,39,40,41,42,43,44,72,82,93,94,95,96,97,98,99,100,101,102,103,104,105,],[71,-55,-56,-57,-58,-59,-60,-61,-49,-66,71,71,71,71,71,71,71,71,-52,-53,-54,-63,-62,]),'STRING':([56,115,127,138,142,],[87,87,87,87,87,]),'NUMBER':([56,115,127,138,142,],[88,88,88,88,88,]),'BOOLEAN':([56,115,127,138,142,],[89,89,89,89,89,]),'ELSE':([122,148,],[134,-28,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'init':([0,],[1,]),'instrucciones':([0,123,124,150,],[2,135,136,153,]),'instruccion':([0,2,123,124,135,136,150,153,],[3,25,3,3,25,25,3,25,]),'instruccion_inline':([0,2,123,124,135,136,150,153,],[4,4,4,4,4,4,4,4,]),'instruccion_bloque':([0,2,123,124,135,136,150,153,],[5,5,5,5,5,5,5,5,]),'interface_definition':([0,2,123,124,135,136,150,153,],[6,6,6,6,6,6,6,6,]),'print':([0,2,123,124,135,136,150,153,],[7,7,7,7,7,7,7,7,]),'declare':([0,2,123,124,135,136,150,153,],[8,8,8,8,8,8,8,8,]),'asignacion':([0,2,123,124,135,136,150,153,],[9,9,9,9,9,9,9,9,]),'llamada':([0,2,19,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,107,119,123,124,126,133,135,136,150,153,],[10,10,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,10,10,44,44,10,10,10,10,]),'retorno':([0,2,123,124,135,136,150,153,],[11,11,11,11,11,11,11,11,]),'instruccion_if':([0,2,123,124,134,135,136,150,153,],[12,12,12,12,147,12,12,12,12,]),'instruccion_while':([0,2,123,124,135,136,150,153,],[13,13,13,13,13,13,13,13,]),'declaracion_funcion':([0,2,123,124,135,136,150,153,],[14,14,14,14,14,14,14,14,]),'tipo_declaracion':([0,2,123,124,135,136,150,153,],[18,18,18,18,18,18,18,18,]),'expresion_logica':([19,28,29,46,47,78,83,84,107,119,126,133,],[32,50,54,76,77,114,117,118,121,132,114,145,]),'expresion_relacional':([19,28,29,35,46,47,58,59,78,83,84,107,119,126,133,],[34,34,34,60,34,34,91,92,34,34,34,34,34,34,34,]),'expresion_numerica':([19,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,107,119,126,133,],[36,36,36,36,72,36,36,36,36,93,94,95,96,97,98,99,100,101,102,103,36,36,36,36,36,36,36,]),'terminal':([19,28,29,35,37,46,47,58,59,61,62,63,64,65,66,67,68,69,70,71,78,83,84,107,119,126,133,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'args':([29,],[51,]),'lexpresiones':([29,],[52,]),'empty':([29,56,78,115,125,127,138,142,],[53,90,112,90,139,90,90,90,]),'lvalues':([45,],[74,]),'interface_props':([49,],[80,]),'tipo_dato':([56,115,127,138,142,],[86,128,141,151,152,]),'params':([78,],[110,]),'lparams':([78,],[111,]),'param':([78,126,],[113,140,]),'ifAux':([108,134,],[122,146,]),'fretorno':([125,],[137,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> init","S'",1,None,None,None),
  ('init -> instrucciones','init',1,'p_init','gramatica.py',173),
  ('instrucciones -> instrucciones instruccion','instrucciones',2,'p_instrucciones','gramatica.py',188),
  ('instrucciones -> instruccion','instrucciones',1,'p_instrucciones','gramatica.py',189),
  ('instruccion -> instruccion_inline','instruccion',1,'p_instruccion','gramatica.py',198),
  ('instruccion -> instruccion_bloque','instruccion',1,'p_instruccion','gramatica.py',199),
  ('instruccion -> interface_definition','instruccion',1,'p_instruccion','gramatica.py',200),
  ('interface_definition -> INTERFACE ID LLAVE_A interface_props SEMICOLON LLAVE_C','interface_definition',6,'p_interface_definition','gramatica.py',204),
  ('interface_props -> interface_props SEMICOLON ID COLON tipo_dato','interface_props',5,'p_interface_props','gramatica.py',208),
  ('interface_props -> ID COLON tipo_dato','interface_props',3,'p_interface_props','gramatica.py',209),
  ('instruccion_inline -> print','instruccion_inline',1,'p_instruccion_inline','gramatica.py',218),
  ('instruccion_inline -> declare','instruccion_inline',1,'p_instruccion_inline','gramatica.py',219),
  ('instruccion_inline -> asignacion','instruccion_inline',1,'p_instruccion_inline','gramatica.py',220),
  ('instruccion_inline -> llamada SEMICOLON','instruccion_inline',2,'p_instruccion_inline','gramatica.py',221),
  ('instruccion_inline -> retorno','instruccion_inline',1,'p_instruccion_inline','gramatica.py',222),
  ('retorno -> RETURN expresion_logica SEMICOLON','retorno',3,'p_retorno','gramatica.py',227),
  ('retorno -> RETURN SEMICOLON','retorno',2,'p_retorno','gramatica.py',228),
  ('print -> CONSOLE DOT LOG LPAREN expresion_logica RPAREN SEMICOLON','print',7,'p_print','gramatica.py',236),
  ('declare -> tipo_declaracion ID COLON tipo_dato ASIG expresion_logica SEMICOLON','declare',7,'p_declare','gramatica.py',242),
  ('asignacion -> ID ASIG expresion_logica SEMICOLON','asignacion',4,'p_asignacion','gramatica.py',246),
  ('tipo_declaracion -> CONST','tipo_declaracion',1,'p_tipo_declaracion','gramatica.py',251),
  ('tipo_declaracion -> VAR','tipo_declaracion',1,'p_tipo_declaracion','gramatica.py',252),
  ('instruccion_bloque -> instruccion_if','instruccion_bloque',1,'p_instruccion_bloque','gramatica.py',259),
  ('instruccion_bloque -> instruccion_while','instruccion_bloque',1,'p_instruccion_bloque','gramatica.py',260),
  ('instruccion_bloque -> declaracion_funcion','instruccion_bloque',1,'p_instruccion_bloque','gramatica.py',261),
  ('instruccion_if -> IF LPAREN expresion_logica RPAREN ifAux','instruccion_if',5,'p_instruccion_if','gramatica.py',266),
  ('instruccion_if -> IF LPAREN expresion_logica RPAREN ifAux ELSE instruccion_if','instruccion_if',7,'p_instruccion_if','gramatica.py',267),
  ('instruccion_if -> IF LPAREN expresion_logica RPAREN ifAux ELSE ifAux','instruccion_if',7,'p_instruccion_if','gramatica.py',268),
  ('ifAux -> LLAVE_A instrucciones LLAVE_C','ifAux',3,'p_ifAux','gramatica.py',282),
  ('instruccion_while -> WHILE LPAREN expresion_logica RPAREN LLAVE_A instrucciones LLAVE_C','instruccion_while',7,'p_while','gramatica.py',287),
  ('declaracion_funcion -> FUNCTION ID LPAREN params RPAREN fretorno LLAVE_A instrucciones LLAVE_C','declaracion_funcion',9,'p_declaracion_funcion','gramatica.py',291),
  ('params -> lparams','params',1,'p_params','gramatica.py',296),
  ('params -> empty','params',1,'p_params','gramatica.py',297),
  ('lparams -> lparams COMA param','lparams',3,'p_lparams','gramatica.py',304),
  ('lparams -> param','lparams',1,'p_lparams','gramatica.py',305),
  ('param -> expresion_logica COLON tipo_dato','param',3,'p_param','gramatica.py',314),
  ('fretorno -> COLON tipo_dato','fretorno',2,'p_fretorno','gramatica.py',320),
  ('fretorno -> empty','fretorno',1,'p_fretorno','gramatica.py',321),
  ('expresion_logica -> expresion_relacional AND expresion_relacional','expresion_logica',3,'p_expresion_logica','gramatica.py',329),
  ('expresion_logica -> expresion_relacional OR expresion_relacional','expresion_logica',3,'p_expresion_logica','gramatica.py',330),
  ('expresion_logica -> NOT expresion_relacional','expresion_logica',2,'p_expresion_logica','gramatica.py',331),
  ('expresion_logica -> expresion_relacional','expresion_logica',1,'p_expresion_logica','gramatica.py',332),
  ('expresion_relacional -> expresion_numerica MAYOR expresion_numerica','expresion_relacional',3,'p_expresion_relacional','gramatica.py',343),
  ('expresion_relacional -> expresion_numerica MENOR expresion_numerica','expresion_relacional',3,'p_expresion_relacional','gramatica.py',344),
  ('expresion_relacional -> expresion_numerica MAYORI expresion_numerica','expresion_relacional',3,'p_expresion_relacional','gramatica.py',345),
  ('expresion_relacional -> expresion_numerica MENORI expresion_numerica','expresion_relacional',3,'p_expresion_relacional','gramatica.py',346),
  ('expresion_relacional -> expresion_numerica IGUAL expresion_numerica','expresion_relacional',3,'p_expresion_relacional','gramatica.py',347),
  ('expresion_relacional -> expresion_numerica DIFF expresion_numerica','expresion_relacional',3,'p_expresion_relacional','gramatica.py',348),
  ('expresion_relacional -> expresion_numerica','expresion_relacional',1,'p_expresion_relacional','gramatica.py',349),
  ('expresion_numerica -> MINUS expresion_numerica','expresion_numerica',2,'p_expresion','gramatica.py',357),
  ('expresion_numerica -> expresion_numerica PLUS expresion_numerica','expresion_numerica',3,'p_expresion','gramatica.py',358),
  ('expresion_numerica -> expresion_numerica MINUS expresion_numerica','expresion_numerica',3,'p_expresion','gramatica.py',359),
  ('expresion_numerica -> expresion_numerica TIMES expresion_numerica','expresion_numerica',3,'p_expresion','gramatica.py',360),
  ('expresion_numerica -> expresion_numerica DIVIDE expresion_numerica','expresion_numerica',3,'p_expresion','gramatica.py',361),
  ('expresion_numerica -> expresion_numerica MODULE expresion_numerica','expresion_numerica',3,'p_expresion','gramatica.py',362),
  ('expresion_numerica -> terminal','expresion_numerica',1,'p_expresion','gramatica.py',363),
  ('terminal -> TNUMBER','terminal',1,'p_terminal','gramatica.py',373),
  ('terminal -> TSTRING','terminal',1,'p_terminal','gramatica.py',374),
  ('terminal -> TRUE','terminal',1,'p_terminal','gramatica.py',375),
  ('terminal -> FALSE','terminal',1,'p_terminal','gramatica.py',376),
  ('terminal -> ID','terminal',1,'p_terminal','gramatica.py',377),
  ('terminal -> llamada','terminal',1,'p_terminal','gramatica.py',378),
  ('terminal -> LLAVE_A lvalues LLAVE_C','terminal',3,'p_terminal','gramatica.py',379),
  ('terminal -> ID DOT ID','terminal',3,'p_terminal','gramatica.py',380),
  ('lvalues -> lvalues COMA ID COLON expresion_logica','lvalues',5,'p_lvalues','gramatica.py',398),
  ('lvalues -> ID COLON expresion_logica','lvalues',3,'p_lvalues','gramatica.py',399),
  ('llamada -> ID LPAREN args RPAREN','llamada',4,'p_llamada','gramatica.py',407),
  ('args -> lexpresiones','args',1,'p_args','gramatica.py',411),
  ('args -> empty','args',1,'p_args','gramatica.py',412),
  ('lexpresiones -> lexpresiones COMA expresion_logica','lexpresiones',3,'p_lexpresiones','gramatica.py',419),
  ('lexpresiones -> expresion_logica','lexpresiones',1,'p_lexpresiones','gramatica.py',420),
  ('tipo_dato -> STRING','tipo_dato',1,'p_tipo_dato','gramatica.py',430),
  ('tipo_dato -> NUMBER','tipo_dato',1,'p_tipo_dato','gramatica.py',431),
  ('tipo_dato -> BOOLEAN','tipo_dato',1,'p_tipo_dato','gramatica.py',432),
  ('tipo_dato -> ID','tipo_dato',1,'p_tipo_dato','gramatica.py',433),
  ('tipo_dato -> empty','tipo_dato',1,'p_tipo_dato','gramatica.py',434),
  ('empty -> <empty>','empty',0,'p_empty','gramatica.py',448),
]
